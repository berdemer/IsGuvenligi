# Multi-stage build for optimization
FROM node:18-alpine AS base

# Set build arguments
ARG NODE_ENV=development

# Install system dependencies in one layer
RUN apk add --no-cache --update \
    git \
    curl \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Create non-root user early
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nestjs -u 1001 -G nodejs

WORKDIR /app

# Copy package files first for better caching
COPY --chown=nestjs:nodejs package*.json ./

# Install dependencies with optimization
RUN npm ci --only=development --no-audit --no-fund && \
    npm cache clean --force

# Copy source code
COPY --chown=nestjs:nodejs . .

# Switch to non-root user
USER nestjs

# Expose ports
EXPOSE 3001 9229

# Health check (moved to docker-compose.yml for better control)
# HEALTHCHECK --interval=15s --timeout=5s --start-period=30s --retries=3 \
#   CMD curl -f http://localhost:3001/health || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Development command
CMD ["npm", "run", "start:debug"]